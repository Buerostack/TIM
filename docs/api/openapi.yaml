openapi: 3.0.3
info:
  title: TIM 2.0 (Token Identity Manager) API
  description: |
    TIM 2.0 - Advanced JWT & OAuth2 Integration Platform

    **Evolution Note:** TIM 2.0 represents a complete architectural rewrite, evolving from the original
    TARA Integration Module to become a universal, provider-agnostic JWT and OAuth2 platform.

    ## Core Features
    - OAuth2/OIDC authentication with multiple providers (Google, GitHub, custom providers)
    - Advanced custom JWT generation, validation, and management
    - Comprehensive token lifecycle management (generation, extension, revocation)
    - Enterprise-grade security and scalability

    ## Authentication
    - OAuth2/OIDC endpoints support standard OAuth2 flows
    - Custom JWT endpoints use bearer token authentication for protected operations
    - Session-based authentication for user profile access

    ## Provider Support
    - **Universal Provider Support**: Configurable OAuth2/OIDC providers
    - **Legacy Support**: Maintains compatibility with TARA Estonia
    - **Enterprise Ready**: Support for custom identity providers
  version: 2.0.0
  contact:
    name: TIM API Support
    url: https://github.com/your-org/tim
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8085
    description: Local development server

tags:
  - name: OAuth2/OIDC Authentication
    description: OAuth2/OIDC authentication endpoints for external providers
  - name: Custom JWT Management
    description: Custom JWT token generation, validation, and management
  - name: Public Keys
    description: Public key endpoints for JWT verification
  - name: Session Management
    description: Session validation and user profile management
  - name: Token Introspection
    description: RFC 7662 compliant token introspection for multi-service validation

paths:
  # OAuth2/OIDC Endpoints
  /auth/health:
    get:
      tags:
        - OAuth2/OIDC Authentication
      summary: OAuth2 service health check
      description: Check the health status of the OAuth2 authentication service
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  service:
                    type: string
                    example: oauth2-authentication
                  timestamp:
                    type: integer
                    format: int64
                    example: 1759176288472
                  available_providers:
                    type: integer
                    example: 2
                  provider_ids:
                    type: array
                    items:
                      type: string
                    example: ["google", "tara"]

  /auth/providers:
    get:
      tags:
        - OAuth2/OIDC Authentication
      summary: List available OAuth2 providers
      description: Get a list of all available OAuth2/OIDC authentication providers
      responses:
        '200':
          description: List of available providers
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    example: 2
                  providers:
                    type: object
                    additionalProperties:
                      $ref: '#/components/schemas/ProviderInfo'

  /auth/providers/{providerId}:
    get:
      tags:
        - OAuth2/OIDC Authentication
      summary: Get specific provider information
      description: Get detailed information about a specific OAuth2 provider
      parameters:
        - name: providerId
          in: path
          required: true
          description: The OAuth2 provider identifier
          schema:
            type: string
            enum: [google, tara]
          example: tara
      responses:
        '200':
          description: Provider information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderInfo'
        '400':
          description: Provider not found or disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login/{providerId}:
    get:
      tags:
        - OAuth2/OIDC Authentication
      summary: Initiate OAuth2 authentication
      description: Start the OAuth2 authentication flow for the specified provider
      parameters:
        - name: providerId
          in: path
          required: true
          description: The OAuth2 provider identifier
          schema:
            type: string
            enum: [google, tara]
          example: tara
        - name: redirect_uri
          in: query
          required: false
          description: Custom redirect URI after authentication
          schema:
            type: string
            format: uri
          example: https://yourapp.com/callback
      responses:
        '200':
          description: Authentication initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  authorization_url:
                    type: string
                    format: uri
                    description: URL to redirect user for authentication
                    example: https://tara.ria.ee/oidc/authorize?response_type=code&client_id=...
                  provider:
                    type: string
                    example: tara
                  state:
                    type: string
                    description: OAuth2 state parameter for security
                    example: abc123def456
        '400':
          description: Provider not available or invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/callback/{providerId}:
    get:
      tags:
        - OAuth2/OIDC Authentication
      summary: Handle OAuth2 callback
      description: Process the OAuth2 callback from the authentication provider
      parameters:
        - name: providerId
          in: path
          required: true
          description: The OAuth2 provider identifier
          schema:
            type: string
            enum: [google, tara]
        - name: code
          in: query
          required: false
          description: Authorization code from OAuth2 provider
          schema:
            type: string
        - name: state
          in: query
          required: false
          description: OAuth2 state parameter
          schema:
            type: string
        - name: error
          in: query
          required: false
          description: Error code if authentication failed
          schema:
            type: string
        - name: error_description
          in: query
          required: false
          description: Human-readable error description
          schema:
            type: string
      responses:
        '200':
          description: Authentication completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: authentication_success
                  provider:
                    type: string
                    example: tara
                  session_id:
                    type: string
                    example: sess_abc123def456
                  expires_at:
                    type: string
                    format: date-time
                    example: "2025-09-29T21:00:00Z"
                  user_profile:
                    $ref: '#/components/schemas/UserProfile'
                  message:
                    type: string
                    example: Authentication completed successfully
        '400':
          description: Authentication failed or invalid callback
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/session/validate:
    get:
      tags:
        - Session Management
      summary: Validate authentication session
      description: Validate an existing authentication session
      parameters:
        - name: session_id
          in: query
          required: true
          description: Session identifier to validate
          schema:
            type: string
          example: sess_abc123def456
      responses:
        '200':
          description: Session is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: true
                  session_id:
                    type: string
                    example: sess_abc123def456
                  user_id:
                    type: string
                    example: user_123
                  provider:
                    type: string
                    example: tara
                  expires_at:
                    type: string
                    format: date-time
                  last_activity:
                    type: string
                    format: date-time
                  authentication_method:
                    type: string
                    example: idcard
                  level_of_assurance:
                    type: string
                    example: high
        '401':
          description: Session is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/profile:
    get:
      tags:
        - Session Management
      summary: Get user profile from session
      description: Retrieve user profile information from an authenticated session
      parameters:
        - name: session_id
          in: query
          required: true
          description: Session identifier
          schema:
            type: string
          example: sess_abc123def456
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Session is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Session Management
      summary: Logout and revoke session
      description: Logout user and revoke the authentication session
      parameters:
        - name: session_id
          in: query
          required: true
          description: Session identifier to logout
          schema:
            type: string
          example: sess_abc123def456
        - name: reason
          in: query
          required: false
          description: Optional reason for logout
          schema:
            type: string
          example: User initiated logout
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: logged_out
                  message:
                    type: string
                    example: Session logged out successfully
        '400':
          description: Session not found or already revoked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Custom JWT Endpoints
  /jwt/custom/generate:
    post:
      tags:
        - Custom JWT Management
      summary: Generate custom JWT token
      description: Generate a new custom JWT token with specified claims and expiration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomJwtGenerateRequest'
            examples:
              basic_token:
                summary: Basic JWT token
                value:
                  JWTName: "USER_TOKEN"
                  content:
                    sub: "user123"
                    role: "admin"
                    department: "engineering"
                  expirationInMinutes: 60
                  setCookie: false
              with_audience:
                summary: JWT with custom audience
                value:
                  JWTName: "API_TOKEN"
                  content:
                    sub: "service_account"
                    scope: "read:users write:posts"
                  audience: ["api.example.com", "admin.example.com"]
                  expirationInMinutes: 120
                  setCookie: true
      responses:
        '200':
          description: JWT token generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Invalid request or audience not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /jwt/custom/validate:
    post:
      tags:
        - Custom JWT Management
      summary: Validate JWT token (detailed)
      description: Validate a JWT token and return detailed validation information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JwtValidationRequest'
            examples:
              basic_validation:
                summary: Basic token validation
                value:
                  token: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
              with_audience:
                summary: Validation with audience check
                value:
                  token: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
                  audience: "api.example.com"
                  issuer: "TIM"
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtValidationResponse'
        '401':
          description: Token is invalid, expired, or revoked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtValidationResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtValidationResponse'

  /jwt/custom/validate/boolean:
    post:
      tags:
        - Custom JWT Management
      summary: Validate JWT token (boolean)
      description: Validate a JWT token and return simple true/false response
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JwtValidationRequest'
            examples:
              quick_check:
                summary: Quick validation check
                value:
                  token: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Token is valid
          content:
            text/plain:
              schema:
                type: string
                enum: ["true"]
              example: "true"
        '401':
          description: Token is invalid, expired, or revoked
          content:
            text/plain:
              schema:
                type: string
                enum: ["false"]
              example: "false"
        '400':
          description: Invalid request
          content:
            text/plain:
              schema:
                type: string
                enum: ["false"]
              example: "false"

  /jwt/custom/revoke:
    post:
      tags:
        - Custom JWT Management
      summary: Revoke JWT token
      description: Revoke (blacklist) a JWT token to prevent its future use
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: JWT token to revoke
                  example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
                reason:
                  type: string
                  description: Optional reason for revocation
                  example: "User requested logout"
            examples:
              basic_revoke:
                summary: Revoke token
                value:
                  token: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
              with_reason:
                summary: Revoke with reason
                value:
                  token: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
                  reason: "Security compromise detected"
      responses:
        '200':
          description: Token revoked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: revoked
                  message:
                    type: string
                    example: Token has been successfully revoked
        '409':
          description: Token was already revoked
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: already_revoked
                  message:
                    type: string
                    example: Token was already revoked
        '400':
          description: Invalid request or revocation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /jwt/custom/revoke/bulk:
    post:
      tags:
        - Custom JWT Management
      summary: Bulk revoke JWT tokens
      description: Revoke multiple JWT tokens in a single operation (max 100 tokens)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tokens
              properties:
                tokens:
                  type: array
                  items:
                    type: string
                  description: Array of JWT tokens to revoke (max 100)
                  example:
                    - "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
                    - "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
                reason:
                  type: string
                  description: Optional reason for bulk revocation
                  example: "Bulk cleanup operation"
            examples:
              bulk_revoke:
                summary: Bulk revoke multiple tokens
                value:
                  tokens:
                    - "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMSJ9.signature1"
                    - "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMiJ9.signature2"
                  reason: "Security audit cleanup"
      responses:
        '200':
          description: All tokens newly revoked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkRevokeResponse'
        '207':
          description: Mixed results (some revoked, some already revoked, some failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkRevokeResponse'
        '409':
          description: All tokens already revoked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkRevokeResponse'
        '400':
          description: Invalid request or too many tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /jwt/custom/extend:
    post:
      tags:
        - Custom JWT Management
      summary: Extend JWT token expiration
      description: |
        Create a new JWT token with extended expiration based on an existing valid token.

        **Extension Chain Tracking**: TIM 2.0 maintains a complete audit trail of token extensions:
        - Each extension creates a new JWT with a new UUID
        - The original token is automatically revoked
        - Extension chain history is preserved for audit purposes
        - All extensions reference the original JWT for traceability
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: Valid JWT token to extend
                  example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
                expirationInMinutes:
                  type: integer
                  description: New expiration time in minutes (default 60)
                  example: 120
                  default: 60
                setCookie:
                  type: boolean
                  description: Whether to set the new token as an HTTP cookie
                  example: false
                  default: false
            examples:
              basic_extend:
                summary: Extend token with default expiration
                value:
                  token: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
              custom_extend:
                summary: Extend with custom expiration and cookie
                value:
                  token: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
                  expirationInMinutes: 240
                  setCookie: true
      responses:
        '200':
          description: Token extended successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Token is invalid, expired, or revoked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request or extension failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /jwt/custom/extension-chain/{originalJwtUuid}:
    get:
      tags:
        - Custom JWT Management
      summary: Get JWT extension chain history
      description: |
        Retrieve the complete extension chain history for a JWT token.

        **Extension Chain Details**:
        - Returns all versions of a JWT from original to current
        - Shows the chronological order of extensions
        - Includes creation timestamps and supersession relationships
        - Useful for audit trails and debugging
      parameters:
        - name: originalJwtUuid
          in: path
          required: true
          description: UUID of the original JWT in the extension chain
          schema:
            type: string
            format: uuid
          example: "12345678-1234-1234-1234-123456789012"
      responses:
        '200':
          description: Extension chain retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  original_jwt_uuid:
                    type: string
                    description: UUID of the first JWT in the chain
                    example: "12345678-1234-1234-1234-123456789012"
                  chain_length:
                    type: integer
                    description: Total number of JWTs in the chain
                    example: 3
                  versions:
                    type: array
                    description: All versions in chronological order
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Internal metadata ID
                          example: "meta-id-123"
                        jwt_uuid:
                          type: string
                          description: JWT UUID for this version
                          example: "12345678-1234-1234-1234-123456789012"
                        created_at:
                          type: string
                          format: date-time
                          description: When this version was created
                          example: "2024-01-15T10:30:00Z"
                        issued_at:
                          type: string
                          format: date-time
                          description: JWT issued at time
                          example: "2024-01-15T10:30:00Z"
                        expires_at:
                          type: string
                          format: date-time
                          description: JWT expiration time
                          example: "2024-01-15T11:30:00Z"
                        supersedes:
                          type: string
                          nullable: true
                          description: Previous version ID (null for original)
                          example: "meta-id-122"
                        is_current:
                          type: boolean
                          description: Whether this is the latest version
                          example: false
                        extension_number:
                          type: integer
                          description: Extension number (0 = original, 1 = first extension, etc.)
                          example: 0
        '404':
          description: Original JWT UUID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /jwt/custom/list/me:
    post:
      tags:
        - Custom JWT Management
      summary: List user's JWT tokens
      description: |
        List all JWT tokens associated with the authenticated user.

        **Authentication Required**: This endpoint requires a valid JWT token in the Authorization header.
        The header must be in the format: `Authorization: Bearer <your-jwt-token>`
      security:
        - BearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          description: JWT token for authentication in Bearer format
          schema:
            type: string
            example: "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
          example: "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMTIzIiwicm9sZSI6ImFkbWluIn0.signature"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  description: Page number for pagination (0-based)
                  example: 0
                  default: 0
                size:
                  type: integer
                  description: Number of tokens per page
                  example: 20
                  default: 20
                includeRevoked:
                  type: boolean
                  description: Include revoked tokens in the list
                  example: false
                  default: false
            examples:
              default_list:
                summary: Default listing (first 20 active tokens)
                value: {}
              paginated_list:
                summary: Paginated listing with revoked tokens
                value:
                  page: 1
                  size: 10
                  includeRevoked: true
      responses:
        '200':
          description: Token list retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tokens:
                    type: array
                    items:
                      $ref: '#/components/schemas/JwtTokenSummary'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 0
                      size:
                        type: integer
                        example: 20
                      total:
                        type: integer
                        example: 42
                      totalPages:
                        type: integer
                        example: 3
              examples:
                successful_response:
                  summary: Successful token listing
                  value:
                    tokens:
                      - jti: "abc123def456"
                        name: "USER_TOKEN"
                        subject: "user123"
                        issuedAt: "2025-09-29T20:05:01Z"
                        expiresAt: "2025-09-29T21:05:01Z"
                        revoked: false
                        revokedAt: null
                        audience: ["api.example.com"]
                      - jti: "xyz789uvw012"
                        name: "API_TOKEN"
                        subject: "user123"
                        issuedAt: "2025-09-29T19:30:15Z"
                        expiresAt: "2025-09-29T22:30:15Z"
                        revoked: false
                        revokedAt: null
                        audience: ["admin.example.com"]
                    pagination:
                      page: 0
                      size: 20
                      total: 2
                      totalPages: 1
        '401':
          description: Invalid or missing authentication token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum: ["invalid_authorization", "invalid_token", "missing_subject", "authentication_failed"]
                    example: "invalid_authorization"
                  message:
                    type: string
                    example: "Authorization header must be in format 'Bearer <token>'"
              examples:
                missing_bearer:
                  summary: Missing Bearer prefix
                  value:
                    error: "invalid_authorization"
                    message: "Authorization header must be in format 'Bearer <token>'"
                invalid_token:
                  summary: Invalid or expired token
                  value:
                    error: "invalid_token"
                    message: "Token is invalid, expired, or revoked"
                missing_subject:
                  summary: Token missing subject
                  value:
                    error: "missing_subject"
                    message: "Token does not contain a valid subject claim"

  # Public Key Endpoints
  /jwt/keys/public:
    get:
      tags:
        - Public Keys
      summary: Get public JWK set
      description: Retrieve the public JSON Web Key Set for JWT signature verification
      responses:
        '200':
          description: Public JWK set
          content:
            application/json:
              schema:
                type: object
                properties:
                  jwk:
                    type: object
                    description: JSON Web Key Set containing public keys
                    properties:
                      keys:
                        type: array
                        items:
                          type: object
                          properties:
                            kty:
                              type: string
                              example: RSA
                            use:
                              type: string
                              example: sig
                            kid:
                              type: string
                              example: jwtsign
                            n:
                              type: string
                              description: RSA modulus
                            e:
                              type: string
                              description: RSA exponent
                              example: AQAB

  # Token Introspection Endpoints
  /introspect:
    post:
      tags:
        - Token Introspection
      summary: RFC 7662 Token Introspection
      description: |
        Introspect a token to determine its active state and metadata.

        **Standards Compliance:** RFC 7662 - OAuth 2.0 Token Introspection

        **Supported Token Types:**
        - Custom JWT tokens (token_type: "custom_jwt")
        - OAuth2 access tokens (token_type: "oauth2_access")

        **Usage:**
        - Microservices use this endpoint to validate tokens
        - Returns active/inactive status plus token metadata
        - Checks signature, expiration, and revocation status
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The token to introspect
                  example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
                token_type_hint:
                  type: string
                  description: Optional hint about the token type
                  example: "custom_jwt"
              required:
                - token
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The token to introspect
                  example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
                token_type_hint:
                  type: string
                  description: Optional hint about the token type
                  example: "custom_jwt"
              required:
                - token
      responses:
        '200':
          description: Token introspection response
          content:
            application/json:
              schema:
                type: object
                properties:
                  active:
                    type: boolean
                    description: Whether the token is active
                    example: true
                  scope:
                    type: string
                    description: Token scope (if applicable)
                    example: "read write"
                  client_id:
                    type: string
                    description: Client identifier
                    example: "service-client"
                  username:
                    type: string
                    description: Username associated with the token
                    example: "user123"
                  token_type:
                    type: string
                    description: Type of the token
                    example: "custom_jwt"
                  exp:
                    type: integer
                    description: Expiration timestamp (Unix epoch)
                    example: 1640995200
                  iat:
                    type: integer
                    description: Issued at timestamp (Unix epoch)
                    example: 1640908800
                  sub:
                    type: string
                    description: Subject identifier
                    example: "user123"
                  aud:
                    oneOf:
                      - type: string
                      - type: array
                        items:
                          type: string
                    description: Audience (string or array)
                    example: "tim-audience"
                  iss:
                    type: string
                    description: Issuer
                    example: "TIM"
                  jti:
                    type: string
                    description: JWT ID
                    example: "uuid-here"
                  jwt_name:
                    type: string
                    description: Human-readable token name
                    example: "USER_TOKEN"
                  original_jwt_uuid:
                    type: string
                    description: UUID of the first JWT in the extension chain
                    example: "12345678-1234-1234-1234-123456789012"
                  extension_count:
                    type: integer
                    description: Number of times this JWT has been extended from the original
                    example: 2
                  supersedes:
                    type: string
                    description: ID of the previous JWT version this token supersedes
                    example: "87654321-4321-4321-4321-210987654321"
                  created_at:
                    type: integer
                    description: Database record creation timestamp (Unix epoch)
                    example: 1640905200
                  extra_claims:
                    type: object
                    description: Additional custom claims
                    additionalProperties: true
                    example:
                      role: "admin"
                      permissions: ["read", "write"]

  /introspect/types:
    get:
      tags:
        - Token Introspection
      summary: Get supported token types
      description: |
        Get information about supported token types for introspection.

        **Informational endpoint** for understanding what token types
        TIM 2.0 can validate via the introspection endpoint.
      responses:
        '200':
          description: Supported token types
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                example:
                  custom_jwt: "CustomJwtTokenValidator"
                  oauth2_access: "OAuth2TokenValidator"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT Bearer token for authentication.

        **How to get a token:**
        1. Use the `/jwt/custom/generate` endpoint to create a JWT token
        2. Copy the `token` value from the response
        3. Click the "Authorize" button above and enter: `Bearer <your-token>`
        4. Or manually add to Authorization header: `Authorization: Bearer <your-token>`

        **Example token format:**
        ```
        Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMTIzIn0.signature
        ```

  schemas:
    ProviderInfo:
      type: object
      properties:
        id:
          type: string
          description: Provider identifier
          example: tara
        name:
          type: string
          description: Human-readable provider name
          example: TARA Estonia
        scopes:
          type: array
          items:
            type: string
          description: Available OAuth2 scopes
          example: ["openid", "idcard", "mid", "smartid"]
        available:
          type: boolean
          description: Whether the provider is currently available
          example: true

    UserProfile:
      type: object
      properties:
        sub:
          type: string
          description: Subject identifier
          example: EE12345678901
        given_name:
          type: string
          description: User's given name
          example: Mari
        family_name:
          type: string
          description: User's family name
          example: Maasikas
        email:
          type: string
          format: email
          description: User's email address
          example: mari@example.ee
        nationalId:
          type: string
          description: National identification number
          example: EE12345678901
        authenticationMethod:
          type: string
          description: Method used for authentication
          example: idcard
        levelOfAssurance:
          type: string
          description: Level of assurance for authentication
          example: high

    CustomJwtGenerateRequest:
      type: object
      required:
        - JWTName
        - content
        - expirationInMinutes
      properties:
        JWTName:
          type: string
          description: Name/identifier for the JWT token
          example: USER_TOKEN
          default: JWTTOKEN
        content:
          type: object
          description: Claims to include in the JWT payload
          additionalProperties: true
          example:
            sub: user123
            role: admin
            department: engineering
        expirationInMinutes:
          type: integer
          description: Token expiration time in minutes
          example: 60
          default: 60
        setCookie:
          type: boolean
          description: Whether to set the token as an HTTP cookie
          example: false
          default: false
        audience:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          description: Target audience(s) for the JWT token
          example: ["api.example.com", "admin.example.com"]

    JwtValidationRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: JWT token to validate
          example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
        audience:
          type: string
          description: Expected audience for validation
          example: api.example.com
        issuer:
          type: string
          description: Expected issuer for validation
          example: TIM
        reason:
          type: string
          description: Reason for the operation (used in revocation)
          example: User logout

    TokenResponse:
      type: object
      properties:
        status:
          type: string
          description: Status of the operation
          example: created
        name:
          type: string
          description: Token name/identifier
          example: USER_TOKEN
        token:
          type: string
          description: The generated JWT token
          example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresAt:
          type: string
          format: date-time
          description: Token expiration timestamp
          example: "2025-09-29T21:05:01.130Z"

    JwtValidationResponse:
      type: object
      properties:
        valid:
          type: boolean
          description: Whether the token is valid
          example: true
        active:
          type: boolean
          description: Whether the token is active (not revoked)
          example: true
        message:
          type: string
          description: Validation result message
          example: Token is valid and active
        claims:
          type: object
          description: JWT claims if token is valid
          additionalProperties: true
          example:
            sub: user123
            role: admin
            iss: TIM
            aud: ["api.example.com"]
            exp: 1759179900
            iat: 1759176300

    JwtTokenSummary:
      type: object
      properties:
        jti:
          type: string
          description: JWT ID
          example: abc123def456
        name:
          type: string
          description: Token name
          example: USER_TOKEN
        subject:
          type: string
          description: Token subject
          example: user123
        issuedAt:
          type: string
          format: date-time
          description: Token issue timestamp
          example: "2025-09-29T20:05:01Z"
        expiresAt:
          type: string
          format: date-time
          description: Token expiration timestamp
          example: "2025-09-29T21:05:01Z"
        revoked:
          type: boolean
          description: Whether the token is revoked
          example: false
        revokedAt:
          type: string
          format: date-time
          description: Revocation timestamp (if revoked)
          example: null
        audience:
          type: array
          items:
            type: string
          description: Token audiences
          example: ["api.example.com"]

    BulkRevokeResponse:
      type: object
      properties:
        status:
          type: string
          description: Overall operation status
          example: completed
        message:
          type: string
          description: Summary message
          example: "Bulk revocation completed: 5 newly revoked, 2 already revoked, 1 failed"
        total:
          type: integer
          description: Total number of tokens processed
          example: 8
        newly_revoked:
          type: integer
          description: Number of tokens newly revoked
          example: 5
        already_revoked:
          type: integer
          description: Number of tokens already revoked
          example: 2
        failed:
          type: integer
          description: Number of tokens that failed to revoke
          example: 1
        details:
          type: array
          items:
            type: object
            properties:
              token:
                type: string
                description: Token identifier (truncated)
                example: "eyJhbGci...truncated"
              status:
                type: string
                enum: [revoked, already_revoked, failed]
                example: revoked
              message:
                type: string
                example: Token revoked successfully
        reason:
          type: string
          description: Reason for bulk revocation (if provided)
          example: Security audit cleanup

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error code
          example: invalid_request
        message:
          type: string
          description: Human-readable error message
          example: Token is required
        details:
          type: object
          description: Additional error details
          additionalProperties: true
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
          example: "2025-09-29T20:05:01.130Z"